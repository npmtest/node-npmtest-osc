{"/home/travis/build/npmtest/node-npmtest-osc/test.js":"/* istanbul instrument in package npmtest_osc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/lib.npmtest_osc.js":"/* istanbul instrument in package npmtest_osc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_osc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_osc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-osc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_osc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_osc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_osc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_osc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_osc.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_osc.__dirname +\n                    '/lib.npmtest_osc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/node_modules/osc/src/platforms/osc-node.js":"/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Node.js transports for osc.js\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global require, module, Buffer*/\n/*jshint node:true*/\n\n(function () {\n    \"use strict\";\n\n    var requireModules = function (paths) {\n        if (paths.forEach === undefined) {\n            paths = [paths];\n        }\n\n        var modules = [];\n        paths.forEach(function (path) {\n            var module = require(path);\n            modules.push(module);\n        });\n\n        return modules;\n    };\n\n    var shallowMerge = function (target, toMerge) {\n        target = target || {};\n        if (toMerge.forEach === undefined) {\n            toMerge = [toMerge];\n        }\n\n        toMerge.forEach(function (obj) {\n            for (var prop in obj) {\n                target[prop] = obj[prop];\n            }\n        });\n\n        return target;\n    };\n\n    var dgram = require(\"dgram\"),\n        SerialPort = require(\"serialport\"),\n        net = require(\"net\"),\n        WebSocket = require(\"ws\"),\n        modules = requireModules([\n            \"../osc.js\",\n            \"../osc-transports.js\",\n            \"./osc-websocket-client.js\"\n        ]),\n        osc = shallowMerge({}, modules);\n\n    /**********\n     * Serial *\n     **********/\n\n    osc.SerialPort = function (options) {\n        this.on(\"open\", this.listen.bind(this));\n        osc.SLIPPort.call(this, options);\n        this.options.bitrate = this.options.bitrate || 9600;\n\n        this.serialPort = options.serialPort;\n        if (this.serialPort) {\n            this.emit(\"open\", this.serialPort);\n        }\n    };\n\n    var p = osc.SerialPort.prototype = Object.create(osc.SLIPPort.prototype);\n    p.constructor = osc.SerialPort;\n\n    p.open = function () {\n        if (this.serialPort) {\n            // If we already have a serial port, close it and open a new one.\n            this.once(\"close\", this.open.bind(this));\n            this.close();\n            return;\n        }\n\n        var that = this;\n\n        this.serialPort = new SerialPort(this.options.devicePath, {\n            baudrate: this.options.bitrate,\n            autoOpen: false\n        });\n\n        this.serialPort.open(function() {\n            that.emit(\"open\", that.serialPort);\n        });\n    };\n\n    p.listen = function () {\n        var that = this;\n\n        this.serialPort.on(\"data\", function (data) {\n            that.emit(\"data\", data, undefined);\n        });\n\n        this.serialPort.on(\"error\", function (err) {\n            that.emit(\"error\", err);\n        });\n\n        this.serialPort.on(\"close\", function (err) {\n            if (err) {\n                that.emit(\"error\", err);\n            } else {\n                that.emit(\"close\");\n            }\n        });\n\n        that.emit(\"ready\");\n    };\n\n    p.sendRaw = function (encoded) {\n        if (!this.serialPort || !this.serialPort.isOpen()) {\n            osc.fireClosedPortSendError(this);\n            return;\n        }\n\n        var that = this;\n        this.serialPort.write(encoded, function (err) {\n            if (err) {\n                that.emit(\"error\", err);\n            }\n        });\n    };\n\n    p.close = function () {\n        if (this.serialPort) {\n            this.serialPort.close();\n        }\n    };\n\n\n    /*******\n     * UDP *\n     *******/\n\n    osc.UDPPort = function (options) {\n        osc.Port.call(this, options);\n\n        this.options.localAddress = this.options.localAddress || \"127.0.0.1\";\n        this.options.localPort = this.options.localPort !== undefined ?\n            this.options.localPort : 57121;\n\n        this.options.remoteAddress = this.options.remoteAddress || \"127.0.0.1\";\n        this.options.remotePort = this.options.remotePort !== undefined ?\n            this.options.remotePort : 57121;\n\n        this.on(\"open\", this.listen.bind(this));\n\n        this.socket = options.socket;\n        if (this.socket) {\n            this.emit(\"open\", this.socket);\n        }\n    };\n\n    p = osc.UDPPort.prototype = Object.create(osc.Port.prototype);\n    p.constructor = osc.UDPPort;\n\n    p.open = function () {\n        var that = this;\n\n        if (this.socket) {\n            return;\n        }\n\n        this.socket = dgram.createSocket(\"udp4\");\n\n        function onBound() {\n            osc.UDPPort.setupMulticast(that);\n\n            if (that.options.broadcast) {\n                that.socket.setBroadcast(that.options.broadcast);\n            }\n\n            that.emit(\"open\", that.socket);\n        }\n\n        this.socket.bind(this.options.localPort, this.options.localAddress, onBound);\n    };\n\n    p.listen = function () {\n        if (!this.socket) {\n            return;\n        }\n\n        var that = this;\n        this.socket.on(\"message\", function (msg, rinfo) {\n            that.emit(\"data\", msg, rinfo);\n        });\n\n        this.socket.on(\"error\", function (error) {\n            that.emit(\"error\", error);\n        });\n\n        this.socket.on(\"close\", function () {\n            that.emit(\"close\");\n        });\n\n        that.emit(\"ready\");\n    };\n\n    p.sendRaw = function (encoded, address, port) {\n        if (!this.socket) {\n            osc.fireClosedPortSendError(this);\n            return;\n        }\n\n        var length = encoded.byteLength !== undefined ? encoded.byteLength : encoded.length,\n            that = this;\n\n        address = address || this.options.remoteAddress;\n        port = port !== undefined ? port : this.options.remotePort;\n\n        this.socket.send(encoded, 0, length, port, address, function (err) {\n            if (err) {\n                that.emit(\"error\", err);\n            }\n        });\n    };\n\n    p.close = function () {\n        if (this.socket) {\n            this.socket.close();\n        }\n    };\n\n    osc.UDPPort.setupMulticast = function (that) {\n        if (that.options.multicastTTL !== undefined) {\n            that.socket.setMulticastTTL(that.options.multicastTTL);\n        }\n\n        if (that.options.multicastMembership) {\n            if (typeof that.options.multicastMembership === \"string\") {\n                that.options.multicastMembership = [that.options.multicastMembership];\n            }\n\n            that.options.multicastMembership.forEach(function (addr) {\n                if (typeof addr === \"string\") {\n                  that.socket.addMembership(addr);\n                } else {\n                  that.socket.addMembership(addr.address, addr.interface);\n                }\n            });\n        }\n    };\n\n\n    /*******\n     * TCP *\n     *******/\n\n    osc.TCPSocketPort = function (options) {\n        osc.SLIPPort.call(this, options);\n\n        var o = this.options;\n        o.localAddress = o.localAddress || \"127.0.0.1\";\n        o.localPort = o.localPort !== undefined ? o.localPort : 57121;\n\n        this.on(\"open\", this.listen.bind(this));\n        this.socket = options.socket;\n\n        if (this.socket) {\n            this.emit(\"open\", this.socket);\n        }\n    };\n\n    p = osc.TCPSocketPort.prototype = Object.create(osc.SLIPPort.prototype);\n    p.constructor = osc.TCPSocketPort;\n\n    p.open = function (address, port) {\n        var o = this.options;\n        address = address || o.address;\n        port = port !== undefined ? port : o.port;\n\n        if (!this.socket) {\n            this.socket = net.connect({\n                port: port,\n                host: address\n            });\n        } else {\n            this.socket.connect(port, address);\n        }\n\n        this.emit(\"open\", this.socket);\n    };\n\n    p.listen = function () {\n        var that = this;\n        this.socket.on(\"data\", function (msg) {\n            that.emit(\"data\", msg, undefined);\n        });\n\n        this.socket.on(\"error\", function (err) {\n            that.emit(\"error\", err);\n        });\n\n        this.socket.on(\"close\", function (err) {\n            if (err) {\n                that.emit(\"error\", err);\n            } else {\n                that.emit(\"close\");\n            }\n        });\n\n        this.socket.on(\"connect\", function () {\n            that.emit(\"ready\");\n        });\n    };\n\n    p.sendRaw = function (encoded) {\n        if (!this.socket) {\n            return;\n        }\n\n        encoded = new Buffer(encoded);\n\n        try {\n            this.socket.write(encoded);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n    };\n\n    p.close = function () {\n        this.socket.end();\n    };\n\n\n    module.exports = osc;\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/node_modules/osc/src/osc.js":"/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/* global require, module, process, Buffer, dcodeIO */\n\nvar osc = osc || {};\n\n(function () {\n\n    \"use strict\";\n\n    osc.SECS_70YRS = 2208988800;\n    osc.TWO_32 = 4294967296;\n\n    osc.defaults = {\n        metadata: false,\n        unpackSingleArgs: true\n    };\n\n    // Unsupported, non-API property.\n    osc.isCommonJS = typeof module !== \"undefined\" && module.exports ? true : false;\n\n    // Unsupported, non-API property.\n    osc.isNode = osc.isCommonJS && typeof window === \"undefined\";\n\n    // Unsupported, non-API property.\n    osc.isElectron = typeof process !== \"undefined\" &&\n        process.versions && process.versions.electron ? true : false;\n\n    // Unsupported, non-API property.\n    osc.isBufferEnv = osc.isNode || osc.isElectron;\n\n    // Unsupported, non-API function.\n    osc.isArray = function (obj) {\n        return obj && Object.prototype.toString.call(obj) === \"[object Array]\";\n    };\n\n    // Unsupported, non-API function\n    osc.isTypedArrayView = function (obj) {\n        return obj.buffer && obj.buffer instanceof ArrayBuffer;\n    };\n\n    // Unsupported, non-API function\n    osc.isBuffer = function (obj) {\n        return osc.isBufferEnv && obj instanceof Buffer;\n    };\n\n    // Private instance of the optional Long dependency.\n    var Long = typeof dcodeIO !== \"undefined\" ? dcodeIO.Long :\n        typeof Long !== \"undefined\" ? Long :\n        osc.isNode ? require(\"long\") : undefined;\n\n    /**\n     * Wraps the specified object in a DataView.\n     *\n     * @param {Array-like} obj the object to wrap in a DataView instance\n     * @return {DataView} the DataView object\n     */\n    // Unsupported, non-API function.\n    osc.dataView = function (obj, offset, length) {\n        if (obj.buffer) {\n            return new DataView(obj.buffer, offset, length);\n        }\n\n        if (obj instanceof ArrayBuffer) {\n            return new DataView(obj, offset, length);\n        }\n\n        return new DataView(new Uint8Array(obj), offset, length);\n    };\n\n    /**\n     * Takes an ArrayBuffer, TypedArray, DataView, Buffer, or array-like object\n     * and returns a Uint8Array view of it.\n     *\n     * Throws an error if the object isn't suitably array-like.\n     *\n     * @param {Array-like or Array-wrapping} obj an array-like or array-wrapping object\n     * @returns {Uint8Array} a typed array of octets\n     */\n    // Unsupported, non-API function.\n    osc.byteArray = function (obj) {\n        if (obj instanceof Uint8Array) {\n            return obj;\n        }\n\n        var buf = obj.buffer ? obj.buffer : obj;\n\n        if (!(buf instanceof ArrayBuffer) && (typeof buf.length === \"undefined\" || typeof buf === \"string\")) {\n            throw new Error(\"Can't wrap a non-array-like object as Uint8Array. Object was: \" +\n                JSON.stringify(obj, null, 2));\n        }\n\n\n        // TODO gh-39: This is a potentially unsafe algorithm;\n        // if we're getting anything other than a TypedArrayView (such as a DataView),\n        // we really need to determine the range of the view it is viewing.\n        return new Uint8Array(buf);\n    };\n\n    /**\n     * Takes an ArrayBuffer, TypedArray, DataView, or array-like object\n     * and returns a native buffer object\n     * (i.e. in Node.js, a Buffer object and in the browser, a Uint8Array).\n     *\n     * Throws an error if the object isn't suitably array-like.\n     *\n     * @param {Array-like or Array-wrapping} obj an array-like or array-wrapping object\n     * @returns {Buffer|Uint8Array} a buffer object\n     */\n    // Unsupported, non-API function.\n    osc.nativeBuffer = function (obj) {\n        if (osc.isBufferEnv) {\n            return osc.isBuffer(obj) ? obj :\n                new Buffer(obj.buffer ? obj : new Uint8Array(obj));\n        }\n\n        return osc.isTypedArrayView(obj) ? obj : new Uint8Array(obj);\n    };\n\n    // Unsupported, non-API function\n    osc.copyByteArray = function (source, target, offset) {\n        if (osc.isTypedArrayView(source) && osc.isTypedArrayView(target)) {\n            target.set(source, offset);\n        } else {\n            var start = offset === undefined ? 0 : offset,\n                len = Math.min(target.length - offset, source.length);\n\n            for (var i = 0, j = start; i < len; i++, j++) {\n                target[j] = source[i];\n            }\n        }\n\n        return target;\n    };\n\n    /**\n     * Reads an OSC-formatted string.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes of the OSC string\n     * @param {Object} offsetState an offsetState object used to store the current offset index\n     * @return {String} the JavaScript String that was read\n     */\n    osc.readString = function (dv, offsetState) {\n        var charCodes = [],\n            idx = offsetState.idx;\n\n        for (; idx < dv.byteLength; idx++) {\n            var charCode = dv.getUint8(idx);\n            if (charCode !== 0) {\n                charCodes.push(charCode);\n            } else {\n                idx++;\n                break;\n            }\n        }\n\n        // Round to the nearest 4-byte block.\n        idx = (idx + 3) & ~0x03;\n        offsetState.idx = idx;\n\n        return String.fromCharCode.apply(null, charCodes);\n    };\n\n    /**\n     * Writes a JavaScript string as an OSC-formatted string.\n     *\n     * @param {String} str the string to write\n     * @return {Uint8Array} a buffer containing the OSC-formatted string\n     */\n    osc.writeString = function (str) {\n        var terminated = str + \"\\u0000\",\n            len = terminated.length,\n            paddedLen = (len + 3) & ~0x03,\n            arr = new Uint8Array(paddedLen);\n\n        for (var i = 0; i < terminated.length; i++) {\n            var charCode = terminated.charCodeAt(i);\n            arr[i] = charCode;\n        }\n\n        return arr;\n    };\n\n    // Unsupported, non-API function.\n    osc.readPrimitive = function (dv, readerName, numBytes, offsetState) {\n        var val = dv[readerName](offsetState.idx, false);\n        offsetState.idx += numBytes;\n\n        return val;\n    };\n\n    // Unsupported, non-API function.\n    osc.writePrimitive = function (val, dv, writerName, numBytes, offset) {\n        offset = offset === undefined ? 0 : offset;\n\n        var arr;\n        if (!dv) {\n            arr = new Uint8Array(numBytes);\n            dv = new DataView(arr.buffer);\n        } else {\n            arr = new Uint8Array(dv.buffer);\n        }\n\n        dv[writerName](offset, val, false);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC int32 (\"i\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readInt32 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getInt32\", 4, offsetState);\n    };\n\n    /**\n     * Writes an OSC int32 (\"i\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeInt32 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setInt32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC int64 (\"h\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readInt64 = function (dv, offsetState) {\n        var high = osc.readPrimitive(dv, \"getInt32\", 4, offsetState),\n            low = osc.readPrimitive(dv, \"getInt32\", 4, offsetState);\n\n        if (Long) {\n            return new Long(low, high);\n        } else {\n            return {\n                high: high,\n                low: low,\n                unsigned: false\n            };\n        }\n    };\n\n    /**\n     * Writes an OSC int64 (\"h\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeInt64 = function (val, dv, offset) {\n        var arr = new Uint8Array(8);\n        arr.set(osc.writePrimitive(val.high, dv, \"setInt32\", 4, offset), 0);\n        arr.set(osc.writePrimitive(val.low,  dv, \"setInt32\", 4, offset + 4), 4);\n        return arr;\n    };\n\n    /**\n     * Reads an OSC float32 (\"f\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readFloat32 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getFloat32\", 4, offsetState);\n    };\n\n    /**\n     * Writes an OSC float32 (\"f\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeFloat32 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setFloat32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC float64 (\"d\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Number} the number that was read\n     */\n    osc.readFloat64 = function (dv, offsetState) {\n        return osc.readPrimitive(dv, \"getFloat64\", 8, offsetState);\n    };\n\n    /**\n     * Writes an OSC float64 (\"d\") value.\n     *\n     * @param {Number} val the number to write\n     * @param {DataView} [dv] a DataView instance to write the number into\n     * @param {Number} [offset] an offset into dv\n     */\n    osc.writeFloat64 = function (val, dv, offset) {\n        return osc.writePrimitive(val, dv, \"setFloat64\", 8, offset);\n    };\n\n    /**\n     * Reads an OSC 32-bit ASCII character (\"c\") value.\n     *\n     * @param {DataView} dv a DataView containing the raw bytes\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {String} a string containing the read character\n     */\n    osc.readChar32 = function (dv, offsetState) {\n        var charCode = osc.readPrimitive(dv, \"getUint32\", 4, offsetState);\n        return String.fromCharCode(charCode);\n    };\n\n    /**\n     * Writes an OSC 32-bit ASCII character (\"c\") value.\n     *\n     * @param {String} str the string from which the first character will be written\n     * @param {DataView} [dv] a DataView instance to write the character into\n     * @param {Number} [offset] an offset into dv\n     * @return {String} a string containing the read character\n     */\n    osc.writeChar32 = function (str, dv, offset) {\n        var charCode = str.charCodeAt(0);\n        if (charCode === undefined || charCode < -1) {\n            return undefined;\n        }\n\n        return osc.writePrimitive(charCode, dv, \"setUint32\", 4, offset);\n    };\n\n    /**\n     * Reads an OSC blob (\"b\") (i.e. a Uint8Array).\n     *\n     * @param {DataView} dv a DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Uint8Array} the data that was read\n     */\n    osc.readBlob = function (dv, offsetState) {\n        var len = osc.readInt32(dv, offsetState),\n            paddedLen = (len + 3) & ~0x03,\n            blob = new Uint8Array(dv.buffer, offsetState.idx, len);\n\n        offsetState.idx += paddedLen;\n\n        return blob;\n    };\n\n    /**\n     * Writes a raw collection of bytes to a new ArrayBuffer.\n     *\n     * @param {Array-like} data a collection of octets\n     * @return {ArrayBuffer} a buffer containing the OSC-formatted blob\n     */\n    osc.writeBlob = function (data) {\n        data = osc.byteArray(data);\n\n        var len = data.byteLength,\n            paddedLen = (len + 3) & ~0x03,\n            offset = 4, // Extra 4 bytes is for the size.\n            blobLen = paddedLen + offset,\n            arr = new Uint8Array(blobLen),\n            dv = new DataView(arr.buffer);\n\n        // Write the size.\n        osc.writeInt32(len, dv);\n\n        // Since we're writing to a real ArrayBuffer,\n        // we don't need to pad the remaining bytes.\n        arr.set(data, offset);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC 4-byte MIDI message.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Uint8Array} an array containing (in order) the port ID, status, data1 and data1 bytes\n     */\n    osc.readMIDIBytes = function (dv, offsetState) {\n        var midi = new Uint8Array(dv.buffer, offsetState.idx, 4);\n        offsetState.idx += 4;\n\n        return midi;\n    };\n\n    /**\n     * Writes an OSC 4-byte MIDI message.\n     *\n     * @param {Array-like} bytes a 4-element array consisting of the port ID, status, data1 and data1 bytes\n     * @return {Uint8Array} the written message\n     */\n    osc.writeMIDIBytes = function (bytes) {\n        bytes = osc.byteArray(bytes);\n\n        var arr = new Uint8Array(4);\n        arr.set(bytes);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC RGBA colour value.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offsetState object used to store the current offset index into dv\n     * @return {Object} a colour object containing r, g, b, and a properties\n     */\n    osc.readColor = function (dv, offsetState) {\n        var bytes = new Uint8Array(dv.buffer, offsetState.idx, 4),\n            alpha = bytes[3] / 255;\n\n        offsetState.idx += 4;\n\n        return {\n            r: bytes[0],\n            g: bytes[1],\n            b: bytes[2],\n            a: alpha\n        };\n    };\n\n    /**\n     * Writes an OSC RGBA colour value.\n     *\n     * @param {Object} color a colour object containing r, g, b, and a properties\n     * @return {Uint8Array} a byte array containing the written color\n     */\n    osc.writeColor = function (color) {\n        var alpha = Math.round(color.a * 255),\n            arr = new Uint8Array([color.r, color.g, color.b, alpha]);\n\n        return arr;\n    };\n\n    /**\n     * Reads an OSC true (\"T\") value by directly returning the JavaScript Boolean \"true\".\n     */\n    osc.readTrue = function () {\n        return true;\n    };\n\n    /**\n     * Reads an OSC false (\"F\") value by directly returning the JavaScript Boolean \"false\".\n     */\n    osc.readFalse = function () {\n        return false;\n    };\n\n    /**\n     * Reads an OSC nil (\"N\") value by directly returning the JavaScript \"null\" value.\n     */\n    osc.readNull = function () {\n        return null;\n    };\n\n    /**\n     * Reads an OSC impulse/bang/infinitum (\"I\") value by directly returning 1.0.\n     */\n    osc.readImpulse = function () {\n        return 1.0;\n    };\n\n    /**\n     * Reads an OSC time tag (\"t\").\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} offsetState an offset state object containing the current index into dv\n     * @param {Object} a time tag object containing both the raw NTP as well as the converted native (i.e. JS/UNIX) time\n     */\n    osc.readTimeTag = function (dv, offsetState) {\n        var secs1900 = osc.readPrimitive(dv, \"getUint32\", 4, offsetState),\n            frac = osc.readPrimitive(dv, \"getUint32\", 4, offsetState),\n            native = (secs1900 === 0 && frac === 1) ? Date.now() : osc.ntpToJSTime(secs1900, frac);\n\n        return {\n            raw: [secs1900, frac],\n            native: native\n        };\n    };\n\n    /**\n     * Writes an OSC time tag (\"t\").\n     *\n     * Takes, as its argument, a time tag object containing either a \"raw\" or \"native property.\"\n     * The raw timestamp must conform to the NTP standard representation, consisting of two unsigned int32\n     * values. The first represents the number of seconds since January 1, 1900; the second, fractions of a second.\n     * \"Native\" JavaScript timestamps are specified as a Number representing milliseconds since January 1, 1970.\n     *\n     * @param {Object} timeTag time tag object containing either a native JS timestamp (in ms) or a NTP timestamp pair\n     * @return {Uint8Array} raw bytes for the written time tag\n     */\n    osc.writeTimeTag = function (timeTag) {\n        var raw = timeTag.raw ? timeTag.raw : osc.jsToNTPTime(timeTag.native),\n            arr = new Uint8Array(8), // Two Unit32s.\n            dv = new DataView(arr.buffer);\n\n        osc.writeInt32(raw[0], dv, 0);\n        osc.writeInt32(raw[1], dv, 4);\n\n        return arr;\n    };\n\n    /**\n     * Produces a time tag containing a raw NTP timestamp\n     * relative to now by the specified number of seconds.\n     *\n     * @param {Number} secs the number of seconds relative to now (i.e. + for the future, - for the past)\n     * @param {Number} now the number of milliseconds since epoch to use as the current time. Defaults to Date.now()\n     * @return {Object} the time tag\n     */\n    osc.timeTag = function (secs, now) {\n        secs = secs || 0;\n        now = now || Date.now();\n\n        var nowSecs = now / 1000,\n            nowWhole = Math.floor(nowSecs),\n            nowFracs = nowSecs - nowWhole,\n            secsWhole = Math.floor(secs),\n            secsFracs = secs - secsWhole,\n            fracs = nowFracs + secsFracs;\n\n        if (fracs > 1) {\n            var fracsWhole = Math.floor(fracs),\n                fracsFracs = fracs - fracsWhole;\n\n            secsWhole += fracsWhole;\n            fracs = fracsFracs;\n        }\n\n        var ntpSecs = nowWhole + secsWhole + osc.SECS_70YRS,\n            ntpFracs = Math.round(osc.TWO_32 * fracs);\n\n        return {\n            raw: [ntpSecs, ntpFracs]\n        };\n    };\n\n    /**\n     * Converts OSC's standard time tag representation (which is the NTP format)\n     * into the JavaScript/UNIX format in milliseconds.\n     *\n     * @param {Number} secs1900 the number of seconds since 1900\n     * @param {Number} frac the number of fractions of a second (between 0 and 2^32)\n     * @return {Number} a JavaScript-compatible timestamp in milliseconds\n     */\n    osc.ntpToJSTime = function (secs1900, frac) {\n        var secs1970 = secs1900 - osc.SECS_70YRS,\n            decimals = frac / osc.TWO_32,\n            msTime = (secs1970 + decimals) * 1000;\n\n        return msTime;\n    };\n\n    osc.jsToNTPTime = function (jsTime) {\n        var secs = jsTime / 1000,\n            secsWhole = Math.floor(secs),\n            secsFrac = secs - secsWhole,\n            ntpSecs = secsWhole + osc.SECS_70YRS,\n            ntpFracs = Math.round(osc.TWO_32 * secsFrac);\n\n        return [ntpSecs, ntpFracs];\n    };\n\n    /**\n     * Reads the argument portion of an OSC message.\n     *\n     * @param {DataView} dv a DataView instance to read from\n     * @param {Object} offsetState the offsetState object that stores the current offset into dv\n     * @param {Oobject} [options] read options\n     * @return {Array} an array of the OSC arguments that were read\n     */\n    osc.readArguments = function (dv, options, offsetState) {\n        var typeTagString = osc.readString(dv, offsetState);\n        if (typeTagString.indexOf(\",\") !== 0) {\n            // Despite what the OSC 1.0 spec says,\n            // it just doesn't make sense to handle messages without type tags.\n            // scsynth appears to read such messages as if they have a single\n            // Uint8 argument. sclang throws an error if the type tag is omitted.\n            throw new Error(\"A malformed type tag string was found while reading \" +\n                \"the arguments of an OSC message. String was: \" +\n                typeTagString, \" at offset: \" + offsetState.idx);\n        }\n\n        var argTypes = typeTagString.substring(1).split(\"\"),\n            args = [];\n\n        osc.readArgumentsIntoArray(args, argTypes, typeTagString, dv, options, offsetState);\n\n        return args;\n    };\n\n    // Unsupported, non-API function.\n    osc.readArgument = function (argType, typeTagString, dv, options, offsetState) {\n        var typeSpec = osc.argumentTypes[argType];\n        if (!typeSpec) {\n            throw new Error(\"'\" + argType + \"' is not a valid OSC type tag. Type tag string was: \" + typeTagString);\n        }\n\n        var argReader = typeSpec.reader,\n            arg = osc[argReader](dv, offsetState);\n\n        if (options.metadata) {\n            arg = {\n                type: argType,\n                value: arg\n            };\n        }\n\n        return arg;\n    };\n\n    // Unsupported, non-API function.\n    osc.readArgumentsIntoArray = function (arr, argTypes, typeTagString, dv, options, offsetState) {\n        var i = 0;\n\n        while (i < argTypes.length) {\n            var argType = argTypes[i],\n                arg;\n\n            if (argType === \"[\") {\n                var fromArrayOpen = argTypes.slice(i + 1),\n                    endArrayIdx = fromArrayOpen.indexOf(\"]\");\n\n                if (endArrayIdx < 0) {\n                    throw new Error(\"Invalid argument type tag: an open array type tag ('[') was found \" +\n                        \"without a matching close array tag ('[]'). Type tag was: \" + typeTagString);\n                }\n\n                var typesInArray = fromArrayOpen.slice(0, endArrayIdx);\n                arg = osc.readArgumentsIntoArray([], typesInArray, typeTagString, dv, options, offsetState);\n                i += endArrayIdx + 2;\n            } else {\n                arg = osc.readArgument(argType, typeTagString, dv, options, offsetState);\n                i++;\n            }\n\n            arr.push(arg);\n        }\n\n        return arr;\n    };\n\n    /**\n     * Writes the specified arguments.\n     *\n     * @param {Array} args an array of arguments\n     * @param {Object} options options for writing\n     * @return {Uint8Array} a buffer containing the OSC-formatted argument type tag and values\n     */\n    osc.writeArguments = function (args, options) {\n        var argCollection = osc.collectArguments(args, options);\n        return osc.joinParts(argCollection);\n    };\n\n    // Unsupported, non-API function.\n    osc.joinParts = function (dataCollection) {\n        var buf = new Uint8Array(dataCollection.byteLength),\n            parts = dataCollection.parts,\n            offset = 0;\n\n        for (var i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            osc.copyByteArray(part, buf, offset);\n            offset += part.length;\n        }\n\n        return buf;\n    };\n\n    // Unsupported, non-API function.\n    osc.addDataPart = function (dataPart, dataCollection) {\n        dataCollection.parts.push(dataPart);\n        dataCollection.byteLength += dataPart.length;\n    };\n\n    osc.writeArrayArguments = function (args, dataCollection) {\n        var typeTag = \"[\";\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            typeTag += osc.writeArgument(arg, dataCollection);\n        }\n\n        typeTag += \"]\";\n\n        return typeTag;\n    };\n\n    osc.writeArgument = function (arg, dataCollection) {\n        if (osc.isArray(arg)) {\n            return osc.writeArrayArguments(arg, dataCollection);\n        }\n\n        var type = arg.type,\n            writer = osc.argumentTypes[type].writer;\n\n        if (writer) {\n            var data = osc[writer](arg.value);\n            osc.addDataPart(data, dataCollection);\n        }\n\n        return arg.type;\n    };\n\n    // Unsupported, non-API function.\n    osc.collectArguments = function (args, options, dataCollection) {\n        if (!osc.isArray(args)) {\n            args = typeof args === \"undefined\" ? [] : [args];\n        }\n\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        if (!options.metadata) {\n            args = osc.annotateArguments(args);\n        }\n\n        var typeTagString = \",\",\n            currPartIdx = dataCollection.parts.length;\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i];\n            typeTagString += osc.writeArgument(arg, dataCollection);\n        }\n\n        var typeData = osc.writeString(typeTagString);\n        dataCollection.byteLength += typeData.byteLength;\n        dataCollection.parts.splice(currPartIdx, 0, typeData);\n\n        return dataCollection;\n    };\n\n    /**\n     * Reads an OSC message.\n     *\n     * @param {Array-like} data an array of bytes to read from\n     * @param {Object} [options] read options\n     * @param {Object} [offsetState] an offsetState object that stores the current offset into dv\n     * @return {Object} the OSC message, formatted as a JavaScript object containing \"address\" and \"args\" properties\n     */\n    osc.readMessage = function (data, options, offsetState) {\n        options = options || osc.defaults;\n\n        var dv = osc.dataView(data, data.byteOffset, data.byteLength);\n        offsetState = offsetState || {\n            idx: 0\n        };\n\n        var address = osc.readString(dv, offsetState);\n        return osc.readMessageContents(address, dv, options, offsetState);\n    };\n\n    // Unsupported, non-API function.\n    osc.readMessageContents = function (address, dv, options, offsetState) {\n        if (address.indexOf(\"/\") !== 0) {\n            throw new Error(\"A malformed OSC address was found while reading \" +\n                \"an OSC message. String was: \" + address);\n        }\n\n        var args = osc.readArguments(dv, options, offsetState);\n\n        return {\n            address: address,\n            args: args.length === 1 && options.unpackSingleArgs ? args[0] : args\n        };\n    };\n\n    // Unsupported, non-API function.\n    osc.collectMessageParts = function (msg, options, dataCollection) {\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        osc.addDataPart(osc.writeString(msg.address), dataCollection);\n        return osc.collectArguments(msg.args, options, dataCollection);\n    };\n\n    /**\n     * Writes an OSC message.\n     *\n     * @param {Object} msg a message object containing \"address\" and \"args\" properties\n     * @param {Object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the OSC message\n     */\n    osc.writeMessage = function (msg, options) {\n        options = options || osc.defaults;\n\n        if (!osc.isValidMessage(msg)) {\n            throw new Error(\"An OSC message must contain a valid address. Message was: \" +\n                JSON.stringify(msg, null, 2));\n        }\n\n        var msgCollection = osc.collectMessageParts(msg, options);\n        return osc.joinParts(msgCollection);\n    };\n\n    osc.isValidMessage = function (msg) {\n        return msg.address && msg.address.indexOf(\"/\") === 0;\n    };\n\n    /**\n     * Reads an OSC bundle.\n     *\n     * @param {DataView} dv the DataView instance to read from\n     * @param {Object} [options] read optoins\n     * @param {Object} [offsetState] an offsetState object that stores the current offset into dv\n     * @return {Object} the bundle or message object that was read\n     */\n    osc.readBundle = function (dv, options, offsetState) {\n        return osc.readPacket(dv, options, offsetState);\n    };\n\n    // Unsupported, non-API function.\n    osc.collectBundlePackets = function (bundle, options, dataCollection) {\n        dataCollection = dataCollection || {\n            byteLength: 0,\n            parts: []\n        };\n\n        osc.addDataPart(osc.writeString(\"#bundle\"), dataCollection);\n        osc.addDataPart(osc.writeTimeTag(bundle.timeTag), dataCollection);\n\n        for (var i = 0; i < bundle.packets.length; i++) {\n            var packet = bundle.packets[i],\n                collector = packet.address ? osc.collectMessageParts : osc.collectBundlePackets,\n                packetCollection = collector(packet, options);\n\n            dataCollection.byteLength += packetCollection.byteLength;\n            osc.addDataPart(osc.writeInt32(packetCollection.byteLength), dataCollection);\n            dataCollection.parts = dataCollection.parts.concat(packetCollection.parts);\n        }\n\n        return dataCollection;\n    };\n\n    /**\n     * Writes an OSC bundle.\n     *\n     * @param {Object} a bundle object containing \"timeTag\" and \"packets\" properties\n     * @param {object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the message\n     */\n    osc.writeBundle = function (bundle, options) {\n        if (!osc.isValidBundle(bundle)) {\n            throw new Error(\"An OSC bundle must contain 'timeTag' and 'packets' properties. \" +\n                \"Bundle was: \" + JSON.stringify(bundle, null, 2));\n        }\n\n        options = options || osc.defaults;\n        var bundleCollection = osc.collectBundlePackets(bundle, options);\n\n        return osc.joinParts(bundleCollection);\n    };\n\n    osc.isValidBundle = function (bundle) {\n        return bundle.timeTag !== undefined && bundle.packets !== undefined;\n    };\n\n    // Unsupported, non-API function.\n    osc.readBundleContents = function (dv, options, offsetState, len) {\n        var timeTag = osc.readTimeTag(dv, offsetState),\n            packets = [];\n\n        while (offsetState.idx < len) {\n            var packetSize = osc.readInt32(dv, offsetState),\n                packetLen = offsetState.idx + packetSize,\n                packet = osc.readPacket(dv, options, offsetState, packetLen);\n\n            packets.push(packet);\n        }\n\n        return {\n            timeTag: timeTag,\n            packets: packets\n        };\n    };\n\n    /**\n     * Reads an OSC packet, which may consist of either a bundle or a message.\n     *\n     * @param {Array-like} data an array of bytes to read from\n     * @param {Object} [options] read options\n     * @return {Object} a bundle or message object\n     */\n    osc.readPacket = function (data, options, offsetState, len) {\n        var dv = osc.dataView(data, data.byteOffset, data.byteLength);\n\n        len = len === undefined ? dv.byteLength : len;\n        offsetState = offsetState || {\n            idx: 0\n        };\n\n        var header = osc.readString(dv, offsetState),\n            firstChar = header[0];\n\n        if (firstChar === \"#\") {\n            return osc.readBundleContents(dv, options, offsetState, len);\n        } else if (firstChar === \"/\") {\n            return osc.readMessageContents(header, dv, options, offsetState);\n        }\n\n        throw new Error(\"The header of an OSC packet didn't contain an OSC address or a #bundle string.\" +\n            \" Header was: \" + header);\n    };\n\n    /**\n     * Writes an OSC packet, which may consist of either of a bundle or a message.\n     *\n     * @param {Object} a bundle or message object\n     * @param {Object} [options] write options\n     * @return {Uint8Array} an array of bytes containing the message\n     */\n    osc.writePacket = function (packet, options) {\n        if (osc.isValidMessage(packet)) {\n            return osc.writeMessage(packet, options);\n        } else if (osc.isValidBundle(packet)) {\n            return osc.writeBundle(packet, options);\n        } else {\n            throw new Error(\"The specified packet was not recognized as a valid OSC message or bundle.\" +\n                \" Packet was: \" + JSON.stringify(packet, null, 2));\n        }\n    };\n\n    // Unsupported, non-API.\n    osc.argumentTypes = {\n        i: {\n            reader: \"readInt32\",\n            writer: \"writeInt32\"\n        },\n        h: {\n            reader: \"readInt64\",\n            writer: \"writeInt64\"\n        },\n        f: {\n            reader: \"readFloat32\",\n            writer: \"writeFloat32\"\n        },\n        s: {\n            reader: \"readString\",\n            writer: \"writeString\"\n        },\n        S: {\n            reader: \"readString\",\n            writer: \"writeString\"\n        },\n        b: {\n            reader: \"readBlob\",\n            writer: \"writeBlob\"\n        },\n        t: {\n            reader: \"readTimeTag\",\n            writer: \"writeTimeTag\"\n        },\n        T: {\n            reader: \"readTrue\"\n        },\n        F: {\n            reader: \"readFalse\"\n        },\n        N: {\n            reader: \"readNull\"\n        },\n        I: {\n            reader: \"readImpulse\"\n        },\n        d: {\n            reader: \"readFloat64\",\n            writer: \"writeFloat64\"\n        },\n        c: {\n            reader: \"readChar32\",\n            writer: \"writeChar32\"\n        },\n        r: {\n            reader: \"readColor\",\n            writer: \"writeColor\"\n        },\n        m: {\n            reader: \"readMIDIBytes\",\n            writer: \"writeMIDIBytes\"\n        },\n        // [] are special cased within read/writeArguments()\n    };\n\n    // Unsupported, non-API function.\n    osc.inferTypeForArgument = function (arg) {\n        var type = typeof arg;\n\n        // TODO: This is freaking hideous.\n        switch (type) {\n            case \"boolean\":\n                return arg ? \"T\" : \"F\";\n            case \"string\":\n                return \"s\";\n            case \"number\":\n                return \"f\";\n            case \"undefined\":\n                return \"N\";\n            case \"object\":\n                if (arg === null) {\n                    return \"N\";\n                } else if (arg instanceof Uint8Array ||\n                    arg instanceof ArrayBuffer) {\n                    return \"b\";\n                } else if (typeof arg.high === \"number\" && typeof arg.low === \"number\") {\n                    return \"h\";\n                }\n                break;\n        }\n\n        throw new Error(\"Can't infer OSC argument type for value: \" +\n            JSON.stringify(arg, null, 2));\n    };\n\n    // Unsupported, non-API function.\n    osc.annotateArguments = function (args) {\n        var annotated = [];\n\n        for (var i = 0; i < args.length; i++) {\n            var arg = args[i],\n                msgArg;\n\n            if (typeof (arg) === \"object\" && arg.type && arg.value !== undefined) {\n                // We've got an explicitly typed argument.\n                msgArg = arg;\n            } else if (osc.isArray(arg)) {\n                // We've got an array of arguments,\n                // so they each need to be inferred and expanded.\n                msgArg = osc.annotateArguments(arg);\n            } else {\n                var oscType = osc.inferTypeForArgument(arg);\n                msgArg = {\n                    type: oscType,\n                    value: arg\n                };\n            }\n\n            annotated.push(msgArg);\n        }\n\n        return annotated;\n    };\n\n    if (osc.isCommonJS) {\n        module.exports = osc;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/node_modules/osc/src/osc-transports.js":"/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Cross-platform base transport library for osc.js.\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/* global require, module */\n\nvar osc = osc || require(\"./osc.js\"),\n    slip = slip || require(\"slip\"),\n    EventEmitter = EventEmitter || require(\"events\").EventEmitter;\n\n(function () {\n\n    \"use strict\";\n\n    // Unsupported, non-API function.\n    osc.firePacketEvents = function (port, packet, timeTag, packetInfo) {\n        if (packet.address) {\n            port.emit(\"message\", packet, timeTag, packetInfo);\n        } else {\n            osc.fireBundleEvents(port, packet, timeTag, packetInfo);\n        }\n    };\n\n    // Unsupported, non-API function.\n    osc.fireBundleEvents = function (port, bundle, timeTag, packetInfo) {\n        port.emit(\"bundle\", bundle, timeTag, packetInfo);\n        for (var i = 0; i < bundle.packets.length; i++) {\n            var packet = bundle.packets[i];\n            osc.firePacketEvents(port, packet, bundle.timeTag, packetInfo);\n        }\n    };\n\n    osc.fireClosedPortSendError = function (port, msg) {\n        msg = msg || \"Can't send packets on a closed osc.Port object. Please open (or reopen) this Port by calling open().\";\n\n        port.emit(\"error\", msg);\n    };\n\n    osc.Port = function (options) {\n        this.options = options || {};\n        this.on(\"data\", this.decodeOSC.bind(this));\n    };\n\n    var p = osc.Port.prototype = Object.create(EventEmitter.prototype);\n    p.constructor = osc.Port;\n\n    p.send = function (oscPacket) {\n        var args = Array.prototype.slice.call(arguments),\n            encoded = this.encodeOSC(oscPacket),\n            buf = osc.nativeBuffer(encoded);\n\n        args[0] = buf;\n        this.sendRaw.apply(this, args);\n    };\n\n    p.encodeOSC = function (packet) {\n        // TODO gh-39: This is unsafe; we should only access the underlying\n        // buffer within the range of its view.\n        packet = packet.buffer ? packet.buffer : packet;\n        var encoded;\n\n        try {\n            encoded = osc.writePacket(packet, this.options);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n\n        return encoded;\n    };\n\n    p.decodeOSC = function (data, packetInfo) {\n        data = osc.byteArray(data);\n        this.emit(\"raw\", data, packetInfo);\n\n        try {\n            var packet = osc.readPacket(data, this.options);\n            this.emit(\"osc\", packet, packetInfo);\n            osc.firePacketEvents(this, packet, undefined, packetInfo);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n    };\n\n\n    osc.SLIPPort = function (options) {\n        var that = this;\n        var o = this.options = options || {};\n        o.useSLIP = o.useSLIP === undefined ? true : o.useSLIP;\n\n        this.decoder = new slip.Decoder({\n            onMessage: this.decodeOSC.bind(this),\n            onError: function (err) {\n                that.emit(\"error\", err);\n            }\n        });\n\n        var decodeHandler = o.useSLIP ? this.decodeSLIPData : this.decodeOSC;\n        this.on(\"data\", decodeHandler.bind(this));\n    };\n\n    p = osc.SLIPPort.prototype = Object.create(osc.Port.prototype);\n    p.constructor = osc.SLIPPort;\n\n    p.encodeOSC = function (packet) {\n        // TODO gh-39: This is unsafe; we should only access the underlying\n        // buffer within the range of its view.\n        packet = packet.buffer ? packet.buffer : packet;\n        var framed;\n\n        try {\n            var encoded = osc.writePacket(packet, this.options);\n            framed = slip.encode(encoded);\n        } catch (err) {\n            this.emit(\"error\", err);\n        }\n\n        return framed;\n    };\n\n    p.decodeSLIPData = function (data, packetInfo) {\n        // TODO: Get packetInfo through SLIP decoder.\n        this.decoder.decode(data, packetInfo);\n    };\n\n\n    // Unsupported, non-API function.\n    osc.relay = function (from, to, eventName, sendFnName, transformFn, sendArgs) {\n        eventName = eventName || \"message\";\n        sendFnName = sendFnName || \"send\";\n        transformFn = transformFn || function () {};\n        sendArgs = sendArgs ? [null].concat(sendArgs) : [];\n\n        var listener = function (data) {\n            sendArgs[0] = data;\n            data = transformFn(data);\n            to[sendFnName].apply(to, sendArgs);\n        };\n\n        from.on(eventName, listener);\n\n        return {\n            eventName: eventName,\n            listener: listener\n        };\n    };\n\n    // Unsupported, non-API function.\n    osc.relayPorts = function (from, to, o) {\n        var eventName = o.raw ? \"raw\" : \"osc\",\n            sendFnName = o.raw ? \"sendRaw\" : \"send\";\n\n        return osc.relay(from, to, eventName, sendFnName, o.transform);\n    };\n\n    // Unsupported, non-API function.\n    osc.stopRelaying = function (from, relaySpec) {\n        from.removeListener(relaySpec.eventName, relaySpec.listener);\n    };\n\n\n    /**\n     * A Relay connects two sources of OSC data together,\n     * relaying all OSC messages received by each port to the other.\n     * @constructor\n     *\n     * @param {osc.Port} port1 the first port to relay\n     * @param {osc.Port} port2 the second port to relay\n     * @param {Object} options the configuration options for this relay\n     */\n    osc.Relay = function (port1, port2, options) {\n        var o = this.options = options || {};\n        o.raw = false;\n\n        this.port1 = port1;\n        this.port2 = port2;\n\n        this.listen();\n    };\n\n    p = osc.Relay.prototype = Object.create(EventEmitter.prototype);\n    p.constructor = osc.Relay;\n\n    p.open = function () {\n        this.port1.open();\n        this.port2.open();\n    };\n\n    p.listen = function () {\n        if (this.port1Spec && this.port2Spec) {\n            this.close();\n        }\n\n        this.port1Spec = osc.relayPorts(this.port1, this.port2, this.options);\n        this.port2Spec = osc.relayPorts(this.port2, this.port1, this.options);\n\n        // Bind port close listeners to ensure that the relay\n        // will stop forwarding messages if one of its ports close.\n        // Users are still responsible for closing the underlying ports\n        // if necessary.\n        var closeListener = this.close.bind(this);\n        this.port1.on(\"close\", closeListener);\n        this.port2.on(\"close\", closeListener);\n    };\n\n    p.close = function () {\n        osc.stopRelaying(this.port1, this.port1Spec);\n        osc.stopRelaying(this.port2, this.port2Spec);\n        this.emit(\"close\", this.port1, this.port2);\n    };\n\n\n    // If we're in a require-compatible environment, export ourselves.\n    if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = osc;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/node_modules/osc/src/platforms/osc-websocket-client.js":"/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Cross-Platform Web Socket client transport for osc.js.\n *\n * Copyright 2014-2016, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global WebSocket, require*/\n\nvar osc = osc || require(\"../osc.js\");\n\n(function () {\n\n    \"use strict\";\n\n    osc.WebSocket = typeof WebSocket !== \"undefined\" ? WebSocket : require (\"ws\");\n\n    osc.WebSocketPort = function (options) {\n        osc.Port.call(this, options);\n        this.on(\"open\", this.listen.bind(this));\n\n        this.socket = options.socket;\n        if (this.socket) {\n            if (this.socket.readyState === 1) {\n                osc.WebSocketPort.setupSocketForBinary(this.socket);\n                this.emit(\"open\", this.socket);\n            } else {\n                this.open();\n            }\n        }\n    };\n\n    var p = osc.WebSocketPort.prototype = Object.create(osc.Port.prototype);\n    p.constructor = osc.WebSocketPort;\n\n    p.open = function () {\n        if (!this.socket || this.socket.readyState > 1) {\n            this.socket = new osc.WebSocket(this.options.url);\n        }\n\n        osc.WebSocketPort.setupSocketForBinary(this.socket);\n\n        var that = this;\n        this.socket.onopen = function () {\n            that.emit(\"open\", that.socket);\n        };\n    };\n\n    p.listen = function () {\n        var that = this;\n        this.socket.onmessage = function (e) {\n            that.emit(\"data\", e.data, e);\n        };\n\n        this.socket.onerror = function (err) {\n            that.emit(\"error\", err);\n        };\n\n        this.socket.onclose = function (e) {\n            that.emit(\"close\", e);\n        };\n\n        that.emit(\"ready\");\n    };\n\n    p.sendRaw = function (encoded) {\n        if (!this.socket || this.socket.readyState !== 1) {\n            osc.fireClosedPortSendError(this);\n            return;\n        }\n\n        this.socket.send(encoded);\n    };\n\n    p.close = function (code, reason) {\n        this.socket.close(code, reason);\n    };\n\n    osc.WebSocketPort.setupSocketForBinary = function (socket) {\n        socket.binaryType = osc.isNode ? \"nodebuffer\" : \"arraybuffer\";\n    };\n\n}());\n","/home/travis/build/npmtest/node-npmtest-osc/node_modules/osc/Gruntfile.js":"/*\n * osc.js: An Open Sound Control library for JavaScript that works in both the browser and Node.js\n *\n * Grunt Build File\n *\n * Copyright 2014-2015, Colin Clark\n * Licensed under the MIT and GPL 3 licenses.\n */\n\n/*global module*/\n/*jshint strict:false*/\n\nmodule.exports = function(grunt) {\n\n    var files = {\n        moduleDeps: [\n            \"node_modules/long/dist/long.js\",\n            \"node_modules/slip/src/slip.js\",\n            \"node_modules/wolfy87-eventemitter/EventEmitter.js\"\n        ],\n\n        osc: [\n            \"src/osc.js\"\n        ],\n\n        oscWeb: [\n            \"src/osc-transports.js\",\n            \"src/platforms/osc-websocket-client.js\"\n        ],\n\n        oscChrome: [\n            \"src/platforms/osc-chromeapp.js\"\n        ],\n\n        moduleHeader: [\n            \"build-support/js/module-header.js\"\n        ],\n\n        moduleFooter: [\n            \"build-support/js/module-footer.js\"\n        ]\n    };\n\n    grunt.initConfig({\n        pkg: grunt.file.readJSON(\"package.json\"),\n\n        jshint: {\n            all: [\"src/*.js\", \"tests/**/*.js\", \"!**/node_modules/**\"],\n            options: {\n                jshintrc: true\n            }\n        },\n\n        concat: {\n            options: {\n                separator: \";\",\n                banner: \"<%= oscjs.banners.short %>\"\n            },\n\n            base: {\n                src: [].concat(files.osc),\n                dest: \"dist/<%= pkg.name %>.js\"\n            },\n\n            browser: {\n                src: [].concat(files.osc, files.moduleDeps, files.oscWeb),\n                dest: \"dist/<%= pkg.name %>-browser.js\"\n            },\n\n            chromeapp: {\n                src: [].concat(files.osc, files.moduleDeps, files.oscWeb, files.oscChrome),\n                dest: \"dist/<%= pkg.name %>-chromeapp.js\"\n            },\n\n            module: {\n                src: [].concat(files.moduleHeader, files.osc, files.oscWeb, files.moduleFooter),\n                dest: \"dist/<%= pkg.name %>-module.js\"\n            }\n        },\n\n        uglify: {\n            options: {\n                banner: \"<%= oscjs.banners.short %>\",\n                beautify: {\n                    ascii_only: true\n                }\n            },\n            all: {\n                files: [\n                    {\n                        expand: true,\n                        cwd: \"dist/\",\n                        src: [\"*.js\"],\n                        dest: \"dist/\",\n                        ext: \".min.js\",\n                    }\n                ]\n            }\n        },\n\n        clean: {\n            all: {\n                src: [\"dist/\"]\n            }\n        },\n\n        oscjs: {\n            banners: {\n                short: \"/*! osc.js <%= pkg.version %>, \" +\n                    \"Copyright <%= grunt.template.today('yyyy') %> Colin Clark | \" +\n                    \"github.com/colinbdclark/osc.js */\\n\\n\"\n            }\n        }\n    });\n\n    // Load relevant Grunt plugins.\n    grunt.loadNpmTasks(\"grunt-contrib-concat\");\n    grunt.loadNpmTasks(\"grunt-contrib-uglify\");\n    grunt.loadNpmTasks(\"grunt-contrib-clean\");\n    grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n\n    grunt.registerTask(\"default\", [\"clean\", \"jshint\", \"concat\", \"uglify\"]);\n};\n"}